
npm does not stand for node package manager. npm does not have a full form. On its official website npmjs.com there is not a single line where it is written that it is node package manager. Though it manages packages but it is not stand for node package manager.

All the packages are hosted on npm

Package.json is a configuratio for npm why do we need package.json file ? npm is the package manager and manages all the packages that we install in our system and sometimes these packages also known as dependecies. A project is dependent on so many packages which are dependencies and npm manages them. 

Now we have to install our dependencies. The most important package in our project is BUNDLER. what is bundler? we have these normal file like html css js files our whole code needs to be bundle it together, our whole code needs to be minfied, our whole code needs to be compressed, our whole needs to be cleened before it send to production. So a bundler helps us to do all that things. The examples of bundlers are: Web Pack, Vite, Parcel. Create-react-app behind the scenes uses Web Pack bundler.

When we have to install any depenedency then we have to tell npm that which type we want there are two types of dependencies 1: Dev dependency 2: normal depency, The difference between them is dev depency is used only in project not for production but the normal dependency also uses for production level. if we want to use dev dependency then we have to tell to nmp as -D dependency name. for example: npm istall -D parcel.

What are ^ and ~ in package.json file: ^ stand for carret and ~ stands for tilde. When we put ^ before our parcel version it means if there is a minor upgradation in parcel version afte some days then our parcel version automatically upgraded itself by carret ^. and if we put ~ before our parcel version then if there is a major upgrade comes then our parcel will upgrade itself automatically. but the good practice is to use ^ because if we upgrade major changes into our project then our project may not work properly.

after adding parcel to our project we got another file name as package-lock.json which keeps the track of the exact same versions of all the dependencies that we installed. why this file is important? it is working on my local but dont know why it isnt working on production so basically to avoid that package-lock.json keeps a hash (integrity(below the version)) to verify that whatever there in my machine is a same verison which is been deploying to the production.

after adding parcel we got another file which is node modules that contains all the code that we fetch from npm so when we write npm istall parcel it took some time what it was doing it was fetching all the code of parcel and put it in inside of node modules.

so we understood that package.json is a configuration for our npm and node modules is kind of database it contains the actual data of that dependencies of those packages that our projects needs.

Transitive dependencies: when we install parcel then why do we got so many other randoms things also appears in node modules it came over here because our project needs parcel now parcel as a project has it own dependencies and those dependencies can have it there own dependecies and those dependencies can have there own dependencies this is known as transitive dependencies.

It is important to push package.json and package-lock.json on github but not have to put node_modules on github because if i have my package.json and package-lock.json we can regenerate our node_modules.